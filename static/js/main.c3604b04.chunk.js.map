{"version":3,"sources":["components/SensediaToolsHeader/SensediaToolsHeader.js","components/ToolCard/ToolCard.js","views/Home/Home.js","components/Messages/Messages.js","views/Senschema/SwaggerUploader/SwaggerUploader.js","components/ItemCard/ItemCard.js","views/Senschema/SelectEndpoint/SelectEndpoint.js","views/Senschema/SelectSchema/SelectSchema.js","views/Senschema/ShowSchema/ShowSchema.js","components/ProgressBar/ProgressBar.js","api/SenschemaApi.js","views/Senschema/Senschema.js","config/Routes.js","App.js","serviceWorker.js","index.js"],"names":["SensediaToolsHeader","props","className","href","src","alt","title","ToolCard","target","icon","toolName","withRouter","showWarningMessage","message","messageTitle","toastr","showErrorMessage","options","SwaggerUploader","readValidateAndSaveSwagger","file","reader","FileReader","addEventListener","event","fileContent","jsonContent","JSON","parse","saveSwagger","error","validateAndSaveSwagger","result","readAsText","onDrop","uploadedFiles","uploaded","uploadedFile","type","handleFileUpload","multiple","accept","getRootProps","getInputProps","ItemCard","cardTitle","badgeClass","badgeText","cardText","SelectEndpoint","endpoints","map","endpoint","key","id","onClick","ev","createEndpointSchema","method","path","SelectSchema","schemas","request","showJsonSchema","responses","length","response","schema","code","ShowSchema","textAreaRef","useRef","copyJsonSchema","current","select","document","execCommand","focus","showSuccessMessage","ref","readOnly","rows","stringify","faCopy","faHome","ProgressBar","role","style","width","progress","aria-valuenow","aria-valuemin","aria-valuemax","axios","create","baseURL","process","SCREENS","useState","actualScreen","setActualScreen","swaggerId","setSwaggerId","setEndpoints","endpointSchemas","setEndpointSchemas","selectedSchema","setSelectedSchema","setProgress","showRequestErrorFeedback","errorResponse","data","console","loadSwaggerEndpointsAndChangeScreen","targetSwagger","SenschemaApi","get","then","catch","useEffect","swagger","requestBody","post","targetEndpoint","history","push","previousStep","faArrowLeft","Routes","exact","to","component","Home","Senschema","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3604b04.chunk.js","sourcesContent":["import React from 'react';\n\nimport './SensediaToolsHeader.css'\n\nfunction SensediaToolsHeader(props) {\n    return (\n        <div className=\"tools-header\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-2\">\n                        <div className=\"text-center\">\n                            <a href=\"#/home\">\n                                <img src=\"assets/img/Sensedia_horizontal_color.png\" alt=\"Sensedia Logo\" className=\"sensedia-logo\" />\n                            </a>\n                        </div>\n                    </div>\n                    <div className=\"col-md-8\">\n                        <div className=\"text-center\">\n                            <h2 className=\"page-title\">{props.title}</h2>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default SensediaToolsHeader;\n","import React from 'react'\n\nimport './ToolCard.css'\n\nfunction ToolCard(props) {\n    return (\n        <a href={props.href} target={props.target}>\n            <div className=\"card text-center\">\n                <div className=\"card-body\">\n                    <img src={props.icon} alt=\"Tool icon\" className=\"tool-icon\" />\n                    <hr />\n                    <h4 className=\"tool-title\">\n                        {props.toolName}\n                    </h4>\n                </div>\n            </div>\n        </a>\n    );\n}\n\nexport default ToolCard;","import React from 'react';\nimport { withRouter } from 'react-router-dom'\n\nimport SensediaToolsHeader from '../../components/SensediaToolsHeader'\nimport ToolCard from '../../components/ToolCard'\n\nfunction Home() {\n    return (\n        <>\n            <SensediaToolsHeader title=\"Sensedia tools\" />\n            <div className=\"content-box\">\n                <div className=\"container\">\n                    <div className=\"row\">\n\n                        <div className=\"col-md-4 form-group\">\n                            <ToolCard\n                                href=\"https://www.google.com/url?q=https://openapi-to-postman.herokuapp.com\"\n                                target=\"_blank\"\n                                icon=\"assets/img/pm-logo.png\"\n                                toolName=\"Swagger 3 to postman\"\n                            />\n                        </div>\n\n                        <div className=\"col-md-4 form-group\">\n                            <ToolCard\n                                href=\"#/swagger-to-schema\"\n                                icon=\"assets/img/swagger-logo.png\"\n                                toolName=\"Swagger 3 to json schema\"\n                            />\n                        </div>\n\n                        <div className=\"col-md-4 form-group\">\n                            <ToolCard\n                                href=\"https://script.google.com/a/sensedia.com/macros/s/AKfycbwAItF0nYjamMWX9KbBOPFDHRBo0HaJ6BdgDMI-QnDvGnmU85Q/exec\"\n                                target=\"_blank\"\n                                icon=\"assets/img/gsheets-logo.png\"\n                                toolName=\"Data mapping generator\"\n                            />\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default withRouter(Home);","import toastr from 'toastr'\n\ntoastr.options = {\n  \"closeButton\": true,\n  \"debug\": false,\n  \"newestOnTop\": true,\n  \"progressBar\": true,\n  \"positionClass\": \"toast-top-right\",\n  \"preventDuplicates\": false,\n  \"onclick\": null,\n  \"showDuration\": \"300\",\n  \"hideDuration\": \"1000\",\n  \"timeOut\": \"5000\",\n  \"extendedTimeOut\": \"1000\",\n  \"showEasing\": \"swing\",\n  \"hideEasing\": \"linear\",\n  \"showMethod\": \"fadeIn\",\n  \"hideMethod\": \"fadeOut\"\n}\n\nexport function showSuccessMessage(message, messageTitle = \"Sucess!\") {\n    toastr[\"success\"](message, messageTitle);\n};\n\nexport function showWarningMessage(message, messageTitle = \"Warning!\") {\n    toastr[\"warning\"](message, messageTitle);\n};\n\nexport function showErrorMessage(message, messageTitle = \"Error!\") {\n    toastr[\"error\"](message, messageTitle);\n};","import React from 'react'\n\nimport Dropzone from 'react-dropzone'\nimport { showWarningMessage, showErrorMessage } from '../../../components/Messages'\nimport './SwaggerUploader.css'\n\nfunction SwaggerUploader(props) {\n\n    const validateAndSaveSwagger = (fileContent) => {\n        try {\n            let jsonContent = JSON.parse(fileContent);\n            if (typeof jsonContent === \"object\") {\n                props.saveSwagger(jsonContent);\n            } else {\n                showWarningMessage(\"The sent file is invalid!\");\n            }\n        } catch (error) {\n            showErrorMessage(\"Failed to read file content!\");\n        }\n    };\n\n    const readValidateAndSaveSwagger = (file) => {\n        const reader = new FileReader();\n        reader.addEventListener('load', (event) => {\n            validateAndSaveSwagger(event.target.result);\n        });\n        reader.readAsText(file);\n    };\n\n    const handleFileUpload = (uploaded) => {\n        let uploadedFile = uploaded[0];\n\n        if (!uploadedFile || !uploadedFile.type || uploadedFile.type !== \"application/json\") {\n            showWarningMessage(\"Please send a json file!\");\n            return;\n        } else {\n            readValidateAndSaveSwagger(uploadedFile);\n        }\n    };\n\n    return (\n        <div className=\"container text-light\">\n            <h4 className=\"font-weight-bold\">Upload your swagger 3 file</h4>\n            <small className=\"text-uppercase\">The tool accept only json files with swagger 3 content.</small>\n            <hr />\n            <div className=\"text-center\">\n                <div className=\"file-dropzone form-group\" title=\"Click to choose a file\">\n                    <Dropzone onDrop={uploadedFiles => handleFileUpload(uploadedFiles)} multiple={false} accept=\".json\">\n                        {({ getRootProps, getInputProps }) => (\n                            <section>\n                                <div {...getRootProps()}>\n                                    <input {...getInputProps()} />\n                                    <img src=\"assets/img/upload-icon.png\" alt=\"Upload a swagger 3 file\" className=\"upload-icon\" />\n                                </div>\n                            </section>\n                        )}\n                    </Dropzone>\n                </div>\n                <h5>\n                    <span className=\"font-weight-bold\">Choose a file</span> or drag it here\n                </h5>\n            </div>\n        </div>\n    )\n}\n\nexport default SwaggerUploader;","import React from 'react'\n\nimport './ItemCard.css'\n\nfunction ItemCard(props) {\n    return (\n        <div className=\"card border-primary w-100 item-card\" title={props.cardTitle}>\n            <div className=\"card-body\">\n                <span className={props.badgeClass}>{props.badgeText}</span>\n                <p className=\"text-primary\">\n                    {props.cardText}\n                </p>\n            </div>\n        </div>\n    )\n}\n\nexport default ItemCard;","import React from 'react'\n\nimport ItemCard from '../../../components/ItemCard'\n\nfunction SelectEndpoint(props) {\n\n    return (\n        <div className=\"container\">\n            <div className=\"text-light\">\n                <h4 className=\"font-weight-bold\">Choose an endpoint</h4>\n                <small className=\"text-uppercase\">The tool will create the validation schemas to request and responses of selected endpoint</small>\n                <hr />\n\n                <div className=\"row\">\n                    {\n                        props.endpoints.map(function (endpoint) {\n                            return (\n                                <div key={endpoint.id} className=\"col-lg-3 form-group\" onClick={ev => props.createEndpointSchema(endpoint.id)}>\n                                    <ItemCard \n                                        badgeClass={`badge badge-primary badge-${endpoint.method} `}\n                                        badgeText={endpoint.method}\n                                        cardTitle=\"Click here to select this endpoint\"\n                                        cardText={endpoint.path}\n                                    />\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default SelectEndpoint;","import React from 'react'\n\nimport ItemCard from '../../../components/ItemCard'\n\nimport './SelectSchema.css'\n\nfunction SelectSchema(props) {\n\n    return (\n        <div className=\"container\">\n            <div className=\"text-light\">\n                <h4 className=\"font-weight-bold\">Choose an endpoint schema</h4>\n                <small className=\"text-uppercase\">Please, select one of created schemas to view it code.</small>\n                <hr />\n\n                {\n                    props.schemas.request &&\n                    <div className=\"form-group\">\n                        <h5 className=\"font-weight-bold\">Request schemas</h5>\n                        <div className=\"row\">\n                            <div className=\"form-group col-lg-3\" onClick={ev => props.showJsonSchema(props.schemas.request)}>\n                                <ItemCard\n                                    badgeClass=\"badge badge-primary\"\n                                    badgeText=\"REQUEST\"\n                                    cardTitle=\"Click here to get the JSON schema validation code\"\n                                    cardText=\"Request body schema\"\n                                />\n                            </div>\n                        </div>\n                    </div>\n\n                }\n\n                {\n                    props.schemas.responses && props.schemas.responses.length > 0 &&\n                    <div className=\"form-group\">\n                        <h5 className=\"font-weight-bold\">Response schemas</h5>\n                        <div className=\"row\">\n                            {\n                                props.schemas.responses.map(function (response) {\n                                    return (\n                                        <div className=\"form-group col-lg-3\" onClick={ev => props.showJsonSchema(response.schema)}>\n                                            <ItemCard\n                                                badgeClass=\"badge badge-primary\"\n                                                badgeText={`HTTP ${response.code} RESPONSE`}\n                                                cardTitle=\"Click here to get the JSON schema validation code\"\n                                                cardText=\"Response body schema\"\n                                            />\n                                        </div>\n                                    )\n                                })\n                            }\n                        </div>\n                    </div>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default SelectSchema;","import React, { useRef } from 'react'\n\nimport { faCopy, faHome } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { showSuccessMessage } from '../../../components/Messages'\n\nimport './ShowSchema.css'\n\nfunction ShowSchema(props) {\n\n    const textAreaRef = useRef(null);\n\n    const copyJsonSchema = (event) => {\n        textAreaRef.current.select();\n        document.execCommand('copy');\n        event.target.focus();\n\n        showSuccessMessage(\"The validation code is copied!\");\n    };\n\n    return (\n        <div className=\"container\">\n            <div className=\"text-light\">\n                <h4 className=\"font-weight-bold\">Done!</h4>\n                <small className=\"text-uppercase\">It's the JSON schema validation code to selected request/response.</small>\n                <hr />\n                <textarea\n                    ref={textAreaRef}\n                    className=\"form-control schema-content\"\n                    readOnly rows={12}\n                >\n                    {JSON.stringify(props.schema, null, 4)}\n                </textarea>\n                <div className=\"text-center\">\n                    <button className=\"btn btn-outline-light\" onClick={ev => copyJsonSchema(ev)}>\n                        <FontAwesomeIcon icon={faCopy} />&nbsp;\n                        COPY CODE\n                    </button>\n                    &nbsp;&nbsp;\n                    <a className=\"btn btn-outline-light\" href=\"#/home\">\n                        <FontAwesomeIcon icon={faHome} />&nbsp;\n                        GO TO HOMEPAGE\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ShowSchema;","import React from 'react'\n\nimport './ProgressBar.css'\n\nfunction ProgressBar(props) {\n    return (\n        <div className=\"progress\">\n            <div className=\"progress-bar bg-warning\" role=\"progressbar\" style={{ width: `${props.progress}%` }} aria-valuenow={props.progress} aria-valuemin=\"0\" aria-valuemax=\"100\">\n                Your progress: {props.progress}%\n            </div>\n        </div>\n    );\n}\n\nexport default ProgressBar;","import axios from 'axios'\n\nexport default axios.create({\n    baseURL: process.env.REACT_APP_SENSCHEMA_API_BASE_URL\n});","import React, { useState, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom'\n\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport SwaggerUploader from './SwaggerUploader'\nimport SelectEndpoint from './SelectEndpoint'\nimport SelectSchema from './SelectSchema'\nimport ShowSchema from './ShowSchema'\nimport SensediaToolsHeader from '../../components/SensediaToolsHeader'\nimport ProgressBar from '../../components/ProgressBar'\n\nimport SenschemaApi from '../../api/SenschemaApi'\nimport {\n    showWarningMessage,\n    showErrorMessage\n} from '../../components/Messages'\n\nconst SCREENS = {\n    SwaggerUploader: \"SwaggerUploader\",\n    SelectEndpoint: \"SelectEndpoint\",\n    SelectSchema: \"SelectSchema\",\n    ShowSchema: \"ShowSchema\"\n};\n\nfunction Senschema(props) {\n\n    const [actualScreen, setActualScreen] = useState(SCREENS.SwaggerUploader);\n    const [swaggerId, setSwaggerId] = useState(null);\n    const [endpoints, setEndpoints] = useState(null);\n    const [endpointSchemas, setEndpointSchemas] = useState(null);\n    const [selectedSchema, setSelectedSchema] = useState({});\n    const [progress, setProgress] = useState(0);\n\n    const showRequestErrorFeedback = (errorResponse) => {\n        try {\n            showWarningMessage(errorResponse.data.message);\n        } catch (error) {\n            console.error(errorResponse);\n            showErrorMessage(\"Failed to do the expected action. Please, wait some time, and try again!\");\n        }\n    };\n\n    const saveSwagger = (swagger) => {\n        // Persist swagger using API\n        const requestBody = { swagger: swagger };\n        SenschemaApi.post(\"/swaggers\", requestBody)\n            .then(response => {\n                setSwaggerId(response.data.id);\n                loadSwaggerEndpointsAndChangeScreen(response.data.id);\n            })\n            .catch(error => {\n                showRequestErrorFeedback(error.response);\n            });\n    };\n\n    const loadSwaggerEndpointsAndChangeScreen = (targetSwagger) => {\n        SenschemaApi.get(`/swaggers/${targetSwagger}/endpoints`)\n            .then(response => {\n                setEndpoints(response.data);\n                setActualScreen(SCREENS.SelectEndpoint);\n            })\n            .catch(error => {\n                showRequestErrorFeedback(error.response);\n            });\n    };\n\n    const createEndpointSchema = (targetEndpoint) => {\n        SenschemaApi.get(`/swaggers/${swaggerId}/endpoints/${targetEndpoint}/schemas`)\n            .then(response => {\n                if (response.data.request || response.data.responses) {\n                    setEndpointSchemas(response.data);\n                    setActualScreen(SCREENS.SelectSchema);\n                } else {\n                    showWarningMessage(\"The selected endpoint doesn't have request/responses with applicaton/json content!\");\n                }\n            })\n            .catch(error => {\n                console.error(error);\n                showRequestErrorFeedback(error.response);\n            });\n    };\n\n    const previousStep = () => {\n        if (actualScreen === SCREENS.SwaggerUploader) {\n            // Go to home\n            props.history.push(\"home\");\n        } else {\n            // Change subpage\n            switch (actualScreen) {\n                case SCREENS.SelectEndpoint:\n                    setActualScreen(SCREENS.SwaggerUploader);\n                    break;\n                case SCREENS.SelectSchema:\n                    setActualScreen(SCREENS.SelectEndpoint);\n                    break;\n                default:\n                    setActualScreen(SCREENS.SelectSchema);\n                    break;\n            }\n        }\n    };\n\n    const showJsonSchema = (schema) => {\n        setSelectedSchema(schema);\n        setActualScreen(SCREENS.ShowSchema);\n    };\n\n    /**\n     * Update the progressbar value after all changes in actualScreen variable.\n     */\n    useEffect(function () {\n        switch (actualScreen) {\n            case SCREENS.SwaggerUploader:\n                setProgress(0);\n                break;\n            case SCREENS.SelectEndpoint:\n                setProgress(30);\n                break;\n            case SCREENS.SelectSchema:\n                setProgress(80);\n                break;\n            default:\n                setProgress(100);\n        }\n    }, [actualScreen]);\n\n    return (\n        <>\n            <SensediaToolsHeader title=\"Swagger 3 to json schema\" />\n            <ProgressBar progress={progress} />\n            <div className=\"content-box\">\n                {\n                    {\n                        \"SwaggerUploader\": <SwaggerUploader saveSwagger={saveSwagger} />,\n                        \"SelectEndpoint\": <SelectEndpoint endpoints={endpoints} createEndpointSchema={createEndpointSchema} />,\n                        \"SelectSchema\": <SelectSchema schemas={endpointSchemas} showJsonSchema={showJsonSchema} />,\n                        \"ShowSchema\": <ShowSchema schema={selectedSchema} />\n                    }[actualScreen]\n                }\n\n            </div>\n            <div className=\"text-center form-group\">\n                <button className=\"btn btn-outline-light\" onClick={ev => previousStep()}>\n                    <FontAwesomeIcon icon={faArrowLeft} />&nbsp;\n                    BACK\n                </button>\n            </div>\n        </>\n    );\n}\n\nexport default withRouter(Senschema);","import React from 'react'\nimport { Route, Switch, HashRouter, Redirect } from 'react-router-dom'\n\nimport Home from '../views/Home'\nimport Senschema from '../views/Senschema'\n\nfunction Routes() {\n    return (\n        <HashRouter>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Redirect to=\"/home\" />\n                </Route>\n                <Route exact path=\"/home\" component={Home} />\n                <Route exact path=\"/swagger-to-schema\" component={Senschema} />\n            </Switch>\n        </HashRouter>\n    )\n}\n\nexport default Routes;","import React from 'react';\nimport Routes from './config/Routes'\n\nimport 'toastr/build/toastr.min.js'\n\nimport 'bootswatch/dist/flatly/bootstrap.css'\nimport 'toastr/build/toastr.min.css'\n\nfunction App() {\n  return (\n    <div>\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}